@page "/historial-evaluaciones"
@inject Models.AppDbContext DbContext
@using PruebaTecnica.Models
@using Microsoft.EntityFrameworkCore


<h3>Historial de Evaluaciones</h3>

@if (Historial == null)
{
    <div class="alert alert-danger">
        <h4>Error</h4>
        <p>No se pudo cargar el historial de evaluaciones.</p>
    </div>
}
else if (!Historial.Any())
{
    <div class="alert alert-warning">
        <p>No se encontraron evaluaciones en el historial.</p>
    </div>
}
else
{
    <ul>
        @foreach (var intento in Historial)
        {
            <li>
                <strong>@intento.Evaluacion.Titulo</strong> -
                <span>Puntaje: @(intento.Calificacion.HasValue ? intento.Calificacion.ToString() : "No calificado")</span> -
                <span>Inicio: @intento.FechaInicio.ToShortDateString()</span> -
                <span>Fin: @(intento.FechaFin.HasValue ? intento.FechaFin.Value.ToShortDateString() : "No finalizado")</span>
            </li>
        }
    </ul>
}

@code {
    private List<Intentos> Historial = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Usuario fijo para simular la autenticación
            int usuarioId = 2;

            // Consulta para cargar los intentos junto con el nombre de la evaluación
            Historial = await DbContext.Intentos
                .Include(i => i.Evaluacion) // Relación con Evaluaciones
                .Where(i => i.UsuarioId == usuarioId)
                .ToListAsync();

            if (!Historial.Any())
            {
                Console.WriteLine($"No se encontraron intentos para el usuario con ID: {usuarioId}");
            }
            else
            {
                Console.WriteLine($"Se cargaron {Historial.Count} intentos para el usuario con ID: {usuarioId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el historial de evaluaciones: {ex.Message}");
        }
    }
}
