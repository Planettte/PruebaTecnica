@page "/curso-evaluaciones/{cursoId:int}"
@inject Models.AppDbContext DbContext
@using PruebaTecnica.Models
@using Microsoft.EntityFrameworkCore;

<h3>Evaluaciones del Curso</h3>

@if (EvaluacionesList == null)
{
    <div class="alert alert-danger">
        <h4>Error</h4>
        <p>No se encontraron evaluaciones para el curso especificado.</p>
    </div>
}
else if (EvaluacionesList.Count == 0)
{
    <div class="alert alert-warning">
        <p>No hay evaluaciones disponibles para este curso.</p>
    </div>
}
else
{
    <ul>
        @foreach (var evaluacion in EvaluacionesList)
        {
            <li>
                <strong>@evaluacion.Titulo</strong> -
                <a href="/realizar-evaluacion/@evaluacion.EvaluacionId" class="btn btn-primary btn-sm">Realizar</a>
            </li>
        }
    </ul>
}

@code {
    [Parameter] public int CursoId { get; set; }
    private List<Evaluaciones> EvaluacionesList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Cargar evaluaciones directamente desde el DbContext
            EvaluacionesList = await DbContext.Evaluaciones
                .Where(e => e.CursoId == CursoId)
                .ToListAsync();

            if (EvaluacionesList != null && EvaluacionesList.Any())
            {
                Console.WriteLine($"Se encontraron {EvaluacionesList.Count} evaluaciones para el curso con ID: {CursoId}");
            }
            else
            {
                Console.WriteLine($"No se encontraron evaluaciones para el curso con ID: {CursoId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando evaluaciones: {ex.Message}");
        }
    }
}
